Started learning DSA
Gone through Dr.Bari Algorithm Playlist (1-16 Videos) for knowledge about "Time and Space Complexity".
Started with Arrays:
                    Learnt difference b/w lists vs arrays
                    Methods in arrays
                    Solved some selected problems from "SUMMER VACATION DSA PROBLEM SHEET" by CodeSkool in Arrays on GeeksForGeeks.
                      
Problem1:
Given a sorted array arr[] of distinct integers. Sort the array into a wave-like array and return it
In other words, arrange the elements into a sequence such that arr[1] >= arr[2] <= arr[3] >= arr[4] <= arr[5].....
If there are multiple solutions, find the lexicographically smallest one.
  Example:
    Input:
      n = 5
      arr[] = {1,2,3,4,5}
    Output:
      2 1 4 3 5
    Explanation: Array elements after sorting it in wave form are 2 1 4 3 5.
Solution1:
def convertToWave(self, n : int, a : List[int]) -> None:
       for i in range(0,n-1,2):
           a[i],a[i+1]=a[i+1],a[i]
       print(" ".join(str(x) for x in a))
       
Problem2:
Given an array of size N containing only 0s, 1s, and 2s; sort the array in ascending order.
  Example:
    Input: 
      N = 5
      arr[]= {0 2 1 2 0}
    Output:
      0 0 1 2 2
    Explanation: 0s 1s and 2s are segregated into ascending order.
Solution2:
def sort012(self,array,n):
        a0=[]
        a1=[]
        a2=[]
        for number in array:
            if number==0:
                a0.append(number)
            elif number==1:
                a1.append(number)
            else:
                a2.append(number)
        array[:]=a0+a1+a2 or return array

Problem3:
Given an unsorted array A of size N that contains only non-negative integers, find a continuous sub-array which adds to a given number S.
In case of multiple subarrays, return the subarray which comes first on moving from left to right.
  Example 1:
    Input:
      N = 5, S = 12
      A[] = {1,2,3,7,5}
    Output:
      2 4
    Explanation: The sum of elements from 2nd position to 4th position is 12.
Solution3:
def subArraySum(self,A, n, s):
        for i in range(n):  
            currentsum = A[i]  
        # start array with the initial index   
        # try all subarrays  
        # starting with 'i'  
            j = i + 1  
            while j <= n:  
           
                if currentsum == s:  
                    return [i+1,j]  
                if currentsum > s or j == n:  
                    break  
                currentsum = currentsum + A[j]  
                j = j +1  
        return [-1]   

Problem4:
Given an array of integers. Find the contiguous sub-array(containing at least one number) which has the maximum sum and return its sum.
  Example:
    Input:
      N = 5
      Arr[] = {1,2,3,-2,5}
    Output:
      9
    Explanation: Max subarray sum is 9 of elements (1, 2, 3, -2, 5) which is a contiguous subarray.
Solution4:
def maxSubArraySum(self,a,size):
        maxsum=a[0]
        maxtillelement=0
        for i in a:
            maxtillelement+=i
            if maxsum<maxtillelement:
                maxsum=maxtillelement
            if maxtillelement<0:
                maxtillelement=0
        return maxsum
