Started with Binary search trees
Notes from GFG

Problem1:
Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
You must write an algorithm with O(log n) runtime complexity.
Example 1-1:
Input: nums = [1,3,5,6], target = 5
Output: 2
Example 1-2:
Input: nums = [1,3,5,6], target = 2
Output: 1
Example 1-3:
Input: nums = [1,3,5,6], target = 7
Output: 4
Solution:
def searchInsert(self, nums: List[int], target: int) -> int:
        left=0
        right=len(nums)-1
        while left<=right:
            mid=(left+right)//2
            if nums[mid]==target:
                return mid
            elif nums[mid]<target:
                left=mid+1
            else:
                right=mid-1
        return left
-->For input with duplicates, we only need a little bit modification:
def searchInsert(self, nums, target): # works even if there are duplicates. 
    l , r = 0, len(nums)-1
    while l <= r:
        mid=(l+r)/2
        if nums[mid] < target:
            l = mid+1
        else:
            if nums[mid]== target and nums[mid-1]!=target:
                return mid
            else:
                r = mid-1
    return l

Problem2:
Given a non-negative integer x, compute and return the square root of x.
Since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.
Note: You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.
Example 2-1:
Input: x = 4
Output: 2-2
Example 2:
Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.
Solution2:
def mySqrt(self, x):
        l, r = 0, x
        while l <= r:
            mid = l + (r-l)//2
            if mid * mid <= x < (mid+1)*(mid+1):
                return mid
            elif x < mid * mid:
                r = mid - 1
            else:
                l = mid + 1
Problem3:
Given a characters array letters that is sorted in non-decreasing order and a character target, return the smallest character in the array that is larger than target.
Note that the letters wrap around.
For example, if target == 'z' and letters == ['a', 'b'], the answer is 'a'.
Example 3-1:
Input: letters = ["c","f","j"], target = "a"
Output: "c"
Example 3-2:
Input: letters = ["c","f","j"], target = "c"
Output: "f"
Example 3-3:
Input: letters = ["c","f","j"], target = "d"
Output: "f"
Solution3 (MySolution):
def nextGreatestLetter(self,letters, target) -> str:
        letters=list(set(letters))
        letters.sort()
        if target>=letters[-1] or target<letters[0]:
            return letters[0]
        left=0
        right=len(letters)-1
        while left<=right:
            mid=(left+right)//2
            if letters[mid]==target: 
                return letters[mid+1]
            elif letters[mid]<target:
                left=mid+1
            else:
                right=mid-1
        return letters[left]

Problem4:
Given an n x n matrix where each of the rows and columns is sorted in ascending order, return the kth smallest element in the matrix.
Note that it is the kth smallest element in the sorted order, not the kth distinct element.
You must find a solution with a memory complexity better than O(n^2).
Example 4-1:
Input: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8
Output: 13
Explanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13
Example 4-2:
Input: matrix = [[-5]], k = 1
Output: -5
class Solution:
    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:
        l=[]
        for x in matrix:
            l=l+x
        l.sort()
        return l[k-1]
        
        
        


